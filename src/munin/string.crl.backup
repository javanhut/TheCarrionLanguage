grim String:
    init(value):
        self.value = value
    
    spell length():
        return len(self.value)
    
    spell upper():
        // Convert to uppercase
        result = ""
        for i in range(0, len(self.value)):
            char = self.value[i]
            if char >= "a" and char <= "z":
                // Convert lowercase to uppercase by ASCII offset
                offset = ord(char) - ord("a")
                result = result + chr(ord("A") + offset)
            else:
                result = result + char
        return result
    
    spell lower():
        // Convert to lowercase
        result = ""
        for i in range(0, len(self.value)):
            char = self.value[i]
            if char >= "A" and char <= "Z":
                // Convert uppercase to lowercase by ASCII offset
                offset = ord(char) - ord("A")
                result = result + chr(ord("a") + offset)
            else:
                result = result + char
        return result
    
    spell reverse():
        // Reverse the string
        result = ""
        for i in range(len(self.value) - 1, -1, -1):
            result = result + self.value[i]
        return result
    
    spell find(substring):
        // Find first occurrence of substring
        sub_len = len(substring)
        str_len = len(self.value)
        
        if sub_len > str_len:
            return -1
        
        for i in range(0, str_len - sub_len + 1):
            match = True
            for j in range(0, sub_len):
                if self.value[i + j] != substring[j]:
                    match = False
                    stop
            if match:
                return i
        return -1
    
    spell contains(substring):
        // Check if string contains substring
        return self.find(substring) != -1
    
    spell starts_with(prefix):
        // Check if string starts with prefix
        if len(prefix) > len(self.value):
            return False
        
        for i in range(0, len(prefix)):
            if self.value[i] != prefix[i]:
                return False
        return True
    
    spell ends_with(suffix):
        // Check if string ends with suffix
        if len(suffix) > len(self.value):
            return False
        
        start = len(self.value) - len(suffix)
        for i in range(0, len(suffix)):
            if self.value[start + i] != suffix[i]:
                return False
        return True
    
    spell split(delimiter):
        // Split string by delimiter
        result = []
        current = ""
        del_len = len(delimiter)
        str_len = len(self.value)
        i = 0
        
        while i < str_len:
            // Check if we're at a delimiter
            if i <= str_len - del_len:
                match = True
                for j in range(0, del_len):
                    if self.value[i + j] != delimiter[j]:
                        match = False
                        stop
                if match:
                    result = result + [current]
                    current = ""
                    i = i + del_len
                    skip
            
            current = current + self.value[i]
            i = i + 1
        
        // Add the last part
        result = result + [current]
        return result
    
    spell join(items):
        // Join array of strings with self.value as delimiter
        if len(items) == 0:
            return ""
        
        result = items[0]
        for i in range(1, len(items)):
            result = result + self.value + items[i]
        return result
    
    spell replace(old, new):
        // Replace all occurrences of old with new
        result = ""
        old_len = len(old)
        str_len = len(self.value)
        i = 0
        
        while i < str_len:
            // Check if we're at an occurrence of old
            if i <= str_len - old_len:
                match = True
                for j in range(0, old_len):
                    if self.value[i + j] != old[j]:
                        match = False
                        stop
                if match:
                    result = result + new
                    i = i + old_len
                    skip
            
            result = result + self.value[i]
            i = i + 1
        
        return result
    
    spell strip():
        // Remove leading and trailing whitespace
        start = 0
        end = len(self.value) - 1
        
        // Find first non-whitespace character
        while start <= end and (self.value[start] == " " or 
                                self.value[start] == "\t" or 
                                self.value[start] == "\n"):
            start = start + 1
        
        // Find last non-whitespace character
        while end >= start and (self.value[end] == " " or 
                               self.value[end] == "\t" or 
                               self.value[end] == "\n"):
            end = end - 1
        
        // Extract substring
        result = ""
        for i in range(start, end + 1):
            result = result + self.value[i]
        return result
    
    spell char_at(index):
        // Get character at index (with bounds checking)
        if index < 0:
            index = len(self.value) + index
        
        if index < 0 or index >= len(self.value):
            return None
        
        return self.value[index]
    
    spell substring(start, end):
        // Extract substring from start to end (exclusive)
        if start < 0:
            start = 0
        if end > len(self.value):
            end = len(self.value)
        if start >= end:
            return ""
        
        result = ""
        for i in range(start, end):
            result = result + self.value[i]
        return result
    
    spell count(substring):
        // Count occurrences of substring
        count = 0
        sub_len = len(substring)
        str_len = len(self.value)
        
        if sub_len == 0 or sub_len > str_len:
            return 0
        
        i = 0
        while i <= str_len - sub_len:
            match = True
            for j in range(0, sub_len):
                if self.value[i + j] != substring[j]:
                    match = False
                    stop
            if match:
                count = count + 1
                i = i + sub_len
            else:
                i = i + 1
        
        return count
    
    spell is_alpha():
        // Check if all characters are alphabetic
        if len(self.value) == 0:
            return False
        
        for i in range(0, len(self.value)):
            char = self.value[i]
            if not ((char >= "a" and char <= "z") or (char >= "A" and char <= "Z")):
                return False
        return True
    
    spell is_digit():
        // Check if all characters are digits
        if len(self.value) == 0:
            return False
        
        for i in range(0, len(self.value)):
            char = self.value[i]
            if char < "0" or char > "9":
                return False
        return True
    
    spell is_alnum():
        // Check if all characters are alphanumeric
        if len(self.value) == 0:
            return False
        
        for i in range(0, len(self.value)):
            char = self.value[i]
            if not ((char >= "a" and char <= "z") or 
                   (char >= "A" and char <= "Z") or 
                   (char >= "0" and char <= "9")):
                return False
        return True
    
    spell to_string():
        return self.value