// ArrayLib.crl - Advanced Array Library for Carrion
// This library extends the basic array functionality with more operations

grim ArrayLib:
    init(elements=[]):
        // Initialize with elements from a standard array
        self.elements = elements
    
    // Core indexing methods
    spell get(index):
        // Handle negative indices (Python-style)
        if index < 0:
            index = len(self.elements) + index
        
        // Check bounds
        if index < 0 or index >= len(self.elements):
            raise "IndexError: Index out of range"
        
        return self.elements[index]
    
    spell set(index, value):
        // Handle negative indices (Python-style)
        if index < 0:
            index = len(self.elements) + index
        
        // Check bounds
        if index < 0 or index >= len(self.elements):
            raise "IndexError: Index out of range"
        
        // Create a new array with the updated value
        new_elements = []
        for i in range(len(self.elements)):
            if i == index:
                new_elements = new_elements + [value]
            else:
                new_elements = new_elements + [self.elements[i]]
        
        self.elements = new_elements
        return value
    
    // Size and capacity methods
    spell size():
        return len(self.elements)
    
    spell is_empty():
        return len(self.elements) == 0
    
    // Stack operations
    spell push(value):
        self.elements = self.elements + [value]
        return self
    
    spell pop():
        if len(self.elements) == 0:
            raise "IndexError: Cannot pop from empty array"
        
        last_value = self.elements[len(self.elements) - 1]
        self.elements = self.elements[:len(self.elements) - 1]
        return last_value
    
    // Queue operations
    spell enqueue(value):
        return self.push(value)
    
    spell dequeue():
        if len(self.elements) == 0:
            raise "IndexError: Cannot dequeue from empty array"
        
        first_value = self.elements[0]
        self.elements = self.elements[1:]
        return first_value
    
    // Search and contains
    spell contains(value):
        for item in self.elements:
            if item == value:
                return True
        return False
    
    spell index_of(value):
        for i in range(len(self.elements)):
            if self.elements[i] == value:
                return i
        return -1
    
    // Modification methods
    spell clear():
        self.elements = []
        return self
    
    spell append(value):
        return self.push(value)
    
    spell insert(index, value):
        if index < 0:
            index = len(self.elements) + index
        
        if index < 0 or index > len(self.elements):
            raise "IndexError: Invalid insertion index"
        
        // Create new array with inserted element
        new_elements = []
        for i in range(len(self.elements) + 1):
            if i < index:
                new_elements = new_elements + [self.elements[i]]
            otherwise i == index:
                new_elements = new_elements + [value]
            else:
                new_elements = new_elements + [self.elements[i-1]]
        
        self.elements = new_elements
        return self
    
    spell remove(value):
        index = self.index_of(value)
        if index != -1:
            return self.remove_at(index)
        return self
    
    spell remove_at(index):
        if index < 0:
            index = len(self.elements) + index
        
        if index < 0 or index >= len(self.elements):
            raise "IndexError: Index out of range"
        
        // Create new array without the element at index
        new_elements = []
        for i in range(len(self.elements)):
            if i != index:
                new_elements = new_elements + [self.elements[i]]
        
        self.elements = new_elements
        return self
    
    // Iteration and traversal
    spell for_each(callback_function):
        for i in range(len(self.elements)):
            callback_function(self.elements[i], i)
        return self
    
    spell map(transform_function):
        result = []
        for item in self.elements:
            result = result + [transform_function(item)]
        return ArrayLib(result)
    
    spell filter(predicate_function):
        result = []
        for item in self.elements:
            if predicate_function(item):
                result = result + [item]
        return ArrayLib(result)
    
    spell reduce(reducer_function, initial_value):
        accumulator = initial_value
        for item in self.elements:
            accumulator = reducer_function(accumulator, item)
        return accumulator
    
    // Sorting and ordering
    spell sort():
        // Simple bubble sort implementation
        n = len(self.elements)
        for i in range(n):
            for j in range(0, n - i - 1):
                if self.elements[j] > self.elements[j + 1]:
                    // Swap elements
                    temp = self.elements[j]
                    self.elements[j] = self.elements[j + 1]
                    self.elements[j + 1] = temp
        return self
    
    spell reverse():
        new_elements = []
        for i in range(len(self.elements) - 1, -1, -1):
            new_elements = new_elements + [self.elements[i]]
        self.elements = new_elements
        return self
    
    // Utility methods
    spell slice(start, end=None):
        if start < 0:
            start = len(self.elements) + start
        
        if end == None:
            end = len(self.elements)
        otherwise end < 0:
            end = len(self.elements) + end
        
        result = []
        for i in range(start, end):
            if i >= 0 and i < len(self.elements):
                result = result + [self.elements[i]]
        
        return ArrayLib(result)
    
    spell join(separator=""):
        if len(self.elements) == 0:
            return ""
        
        result = str(self.elements[0])
        for i in range(1, len(self.elements)):
            result = result + separator + str(self.elements[i])
        
        return result
    
    spell to_array():
        return self.elements
    
    spell to_string():
        return str(self.elements)
    
    spell print():
        print(self.elements)
        return self
    
    // Create a new ArrayLib with concatenated elements
    spell concat(other_array):
        if type(other_array) == "ARRAY":
            return ArrayLib(self.elements + other_array)
        otherwise type(other_array) == "INSTANCE":
            // Assume it's another ArrayLib or compatible object
            if other_array.elements:
                return ArrayLib(self.elements + other_array.elements)
        
        raise "TypeError: Cannot concatenate with non-array type"
