grim String:
    init(value):
        self.value = value
    
    spell length():
        return len(self.value)
    
    spell upper():
        result = ""
        for i in range(0, len(self.value)):
            char = self.value[i]
            char_code = ord(char)
            if char_code >= 97 and char_code <= 122:
                result = result + chr(char_code - 32)
            else:
                result = result + char
        return result
    
    spell lower():
        result = ""
        for i in range(0, len(self.value)):
            char = self.value[i]
            char_code = ord(char)
            if char_code >= 65 and char_code <= 90:
                result = result + chr(char_code + 32)
            else:
                result = result + char
        return result
    
    spell reverse():
        result = ""
        for i in range(len(self.value) - 1, -1, -1):
            result = result + self.value[i]
        return result
    
    spell find(substring):
        sub_len = len(substring)
        str_len = len(self.value)
        
        if sub_len > str_len:
            return -1
        
        for i in range(0, str_len - sub_len + 1):
            found = True
            for j in range(0, sub_len):
                if self.value[i + j] != substring[j]:
                    found = False
                    stop
            if found:
                return i
        return -1
    
    spell contains(substring):
        found_at = self.find(substring)
        if found_at >= 0:
            return True
        else:
            return False
    
    spell char_at(index):
        if index < 0:
            index = len(self.value) + index
        
        if index < 0 or index >= len(self.value):
            return None
        
        return self.value[index]
    
    spell to_string():
        return self.value