"""
Float wrapper grimoire providing enhanced floating-point operations and mathematical functions.

This grimoire extends basic float functionality with mathematical operations,
rounding functions, trigonometric calculations, and numerical property testing.
It serves as a comprehensive toolkit for floating-point arithmetic in Carrion applications.

Key Features:
- Rounding and floor/ceiling operations
- Mathematical functions (square root, power, trigonometry)
- Property testing (positive, negative, zero, integer check)
- Type conversions to integer and string
- Precision-aware floating-point comparisons

Usage:
    num = Float(3.14159)
    print(num.round(2))     # Float(3.14)
    print(num.sin())        # Float(0.000...)
    print(num.is_positive()) # True
"""
grim Float:
    init(value = 0.0):
        ```
        Initialize a Float instance with an optional value.
        
        Args:
            value (float): The floating-point value to wrap (default: 0.0)
        ```
        self.value = float(value)
    
    spell round(decimals = 0):
        ```
        Round the float to a specified number of decimal places.
        
        Args:
            decimals (int): Number of decimal places to round to (default: 0)
            
        Returns:
            Float: New Float instance with rounded value
        ```
        multiplier = 1.0
        for i in range(0, decimals):
            multiplier = multiplier * 10.0
        
        rounded = int(self.value * multiplier + 0.5)
        return Float(float(rounded) / multiplier)
    
    spell floor():
        ```
        Return the floor (largest integer less than or equal to) of the float.
        
        Returns:
            Float: New Float instance with floor value
        ```
        return Float(float(int(self.value)))
    
    spell ceil():
        ```
        Return the ceiling (smallest integer greater than or equal to) of the float.
        
        Returns:
            Float: New Float instance with ceiling value
        ```
        if self.value == float(int(self.value)):
            return Float(self.value)
        else:
            if self.value > 0:
                return Float(float(int(self.value) + 1))
            else:
                return Float(float(int(self.value)))
    
    spell abs():
        ```
        Get the absolute value of the float.
        
        Returns:
            Float: New Float instance with absolute value
        ```
        if self.value < 0:
            return Float(-self.value)
        return Float(self.value)
    
    spell sqrt():
        ```
        Calculate the square root using Newton's method.
        
        Returns:
            Float: Square root of the value, or None for negative numbers
        ```
        if self.value < 0:
            return None  # Cannot compute square root of negative number
        
        if self.value == 0:
            return Float(0.0)
        
        # Newton's method for square root
        x = self.value
        guess = x / 2.0
        epsilon = 0.000001
        
        while True:
            better_guess = (guess + x / guess) / 2.0
            if abs(guess - better_guess) < epsilon:
                stop
            guess = better_guess
        
        return Float(guess)
    
    spell pow(exponent):
        ```
        Raise this float to the power of the given exponent.
        
        Uses efficient algorithms for integer exponents. For non-integer
        exponents, provides simplified approximation.
        
        Args:
            exponent (float or Float): The power to raise this float to
            
        Returns:
            Float: The result of self.value ** exponent
        ```
        exp = exponent
        if type(exponent) == "INSTANCE":
            exp = exponent.value
        
        if exp == 0:
            return Float(1.0)
        if exp == 1:
            return Float(self.value)
        
        # For integer exponents, use repeated multiplication
        if exp == float(int(exp)) and exp > 0:
            result = 1.0
            base = self.value
            power = int(exp)
            
            while power > 0:
                if power % 2 == 1:
                    result = result * base
                base = base * base
                power = power // 2
            
            return Float(result)
        
        # For other cases, return approximation
        return Float(self.value)  # Simplified - would need full math library
    
    spell sin():
        ```
        Calculate the sine using Taylor series approximation.
        
        Uses 10 terms of the Taylor series for reasonable accuracy.
        
        Returns:
            Float: Sine of the value in radians
        ```
        # Taylor series approximation for sin(x)
        x = self.value
        result = 0.0
        term = x
        
        for n in range(0, 10):  # 10 terms should be sufficient for most cases
            result = result + term
            term = -term * x * x / float((2 * n + 2) * (2 * n + 3))
        
        return Float(result)
    
    spell cos():
        ```
        Calculate the cosine using Taylor series approximation.
        
        Uses 10 terms of the Taylor series for reasonable accuracy.
        
        Returns:
            Float: Cosine of the value in radians
        ```
        # Taylor series approximation for cos(x)
        x = self.value
        result = 1.0
        term = 1.0
        
        for n in range(1, 10):  # 10 terms should be sufficient
            term = -term * x * x / float((2 * n - 1) * (2 * n))
            result = result + term
        
        return Float(result)
    
    spell is_integer():
        ```
        Check if the float represents an integer value.
        
        Returns:
            Boolean: True if the float has no fractional part
        ```
        return Boolean(self.value == float(int(self.value)))
    
    spell is_positive():
        ```
        Check if the float is positive (greater than zero).
        
        Returns:
            Boolean: True if the float is positive
        ```
        return Boolean(self.value > 0)
    
    spell is_negative():
        ```
        Check if the float is negative (less than zero).
        
        Returns:
            Boolean: True if the float is negative
        ```
        return Boolean(self.value < 0)
    
    spell is_zero():
        ```
        Check if the float is effectively zero within epsilon tolerance.
        
        Uses epsilon comparison for floating-point precision issues.
        
        Returns:
            Boolean: True if the float is close to zero
        ```
        epsilon = 0.000001
        return Boolean(abs(self.value) < epsilon)
    
    spell to_int():
        ```
        Convert the float to an integer (truncated).
        
        Returns:
            Integer representation of the float value
        ```
        return int(self.value)
    
    spell to_string():
        ```
        Convert the float to its string representation.
        
        Returns:
            String representation of the float value
        ```
        return str(self.value)