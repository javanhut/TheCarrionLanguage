package repl

import (
	"fmt"
	"io"
	"strings"
)

// searchSpecificFunction searches for a specific function and displays its help
func searchSpecificFunction(name string, out io.Writer) bool {
	name = strings.ToLower(name)
	
	// Built-in functions
	builtinFuncs := map[string]string{
		"print": "print(*args) - Print values to console\n   Example: print(\"Hello\", 42, True)",
		"len": "len(object) - Get length of strings, arrays, hashes, tuples\n   Example: len(\"hello\") → 5, len([1,2,3]) → 3",
		"type": "type(object) - Get the type of an object as a string\n   Example: type(42) → \"INTEGER\", type(\"hello\") → \"STRING\"",
		"input": "input(prompt=\"\") - Read user input with optional prompt\n   Example: name = input(\"Enter name: \")",
		"range": "range(start, stop, step=1) - Generate sequence of numbers\n   Example: range(5) → [0,1,2,3,4], range(2,8,2) → [2,4,6]",
		"max": "max(*args) - Return maximum value from arguments\n   Example: max(1,5,3) → 5, max([10,20,15]) → 20",
		"abs": "abs(value) - Return absolute value of a number\n   Example: abs(-42) → 42, abs(3.14) → 3.14",
		"ord": "ord(char) - Return ASCII/Unicode code of character\n   Example: ord(\"A\") → 65, ord(\"a\") → 97",
		"chr": "chr(code) - Return character from ASCII/Unicode code\n   Example: chr(65) → \"A\", chr(97) → \"a\"",
		"int": "int(value) - Convert value to integer\n   Example: int(\"42\") → 42, int(3.14) → 3",
		"float": "float(value) - Convert value to float\n   Example: float(\"3.14\") → 3.14, float(42) → 42.0",
		"str": "str(value) - Convert value to string\n   Example: str(42) → \"42\", str([1,2,3]) → \"[1, 2, 3]\"",
		"bool": "bool(value) - Convert value to boolean\n   Example: bool(1) → True, bool(\"\") → False",
		"list": "list(iterable) - Convert iterable to array\n   Example: list(\"hello\") → [\"h\",\"e\",\"l\",\"l\",\"o\"]",
		"tuple": "tuple(iterable) - Convert iterable to tuple\n   Example: tuple([1,2,3]) → (1,2,3)",
		"enumerate": "enumerate(array) - Return array of (index, value) tuples\n   Example: enumerate([\"a\",\"b\"]) → [(0,\"a\"),(1,\"b\")]",
		"pairs": "pairs(hash, filter=\"\") - Return key-value pairs from hash\n   Example: pairs({\"a\":1, \"b\":2}) → [(\"a\",1),(\"b\",2)]",
		"is_sametype": "is_sametype(obj1, obj2) - Check if objects have same type\n   Example: is_sametype(42, 17) → True",
		"help": "help() - Show basic help information",
		"version": "version() - Show Carrion and Munin version information",
		"modules": "modules() - List all available standard library modules",
	}
	
	// Standard library modules
	stdlibModules := map[string]string{
		"array": "Array([elements]) - Enhanced array operations\n   Methods: .append(), .sort(), .reverse(), .contains(), .length()\n   Example: arr = Array([3,1,4]); arr.sort() → [1,3,4]",
		"string": "String(value) - String manipulation and processing\n   Methods: .upper(), .lower(), .find(), .reverse(), .char_at()\n   Example: s = String(\"hello\"); s.upper() → \"HELLO\"",
		"integer": "Integer(value=0) - Integer utilities and conversions\n   Methods: .to_bin(), .to_hex(), .is_prime(), .gcd(), .lcm()\n   Example: i = Integer(42); i.to_bin() → \"0b101010\"",
		"float": "Float(value=0.0) - Floating-point operations\n   Methods: .round(), .sqrt(), .sin(), .cos(), .abs()\n   Example: f = Float(3.14159); f.round(2) → 3.14",
		"boolean": "Boolean(value=False) - Boolean logic operations\n   Methods: .to_int(), .negate(), .and_with(), .or_with()\n   Example: b = Boolean(True); b.to_int() → 1",
		"file": "File() - File I/O operations\n   Methods: .read(), .write(), .append(), .exists()\n   Example: f = File(); content = f.read(\"data.txt\")",
		"os": "OS() - Operating system interface\n   Methods: .cwd(), .listdir(), .getenv(), .run(), .sleep()\n   Example: os = OS(); files = os.listdir(\".\")",
	}
	
	if desc, found := builtinFuncs[name]; found {
		fmt.Fprintf(out, "\n🔧 BUILT-IN FUNCTION: %s\n", strings.ToUpper(name))
		fmt.Fprintf(out, "═════════════════════════════\n")
		fmt.Fprintf(out, "%s\n\n", desc)
		return true
	}
	
	if desc, found := stdlibModules[name]; found {
		fmt.Fprintf(out, "\n🏛️  STANDARD LIBRARY: %s\n", strings.ToUpper(name))
		fmt.Fprintf(out, "══════════════════════════════\n")
		fmt.Fprintf(out, "%s\n\n", desc)
		return true
	}
	
	return false
}

// performFunctionSearch searches for functions matching the query
func performFunctionSearch(query string) []string {
	var results []string
	
	// Define searchable functions with keywords
	functions := map[string][]string{
		"print(*args) - Print values to console": {"print", "output", "display", "console"},
		"len(object) - Get length": {"len", "length", "size", "count"},
		"type(object) - Get object type": {"type", "typeof", "class"},
		"max(*args) - Find maximum value": {"max", "maximum", "largest", "biggest"},
		"abs(value) - Absolute value": {"abs", "absolute", "positive"},
		"int(value) - Convert to integer": {"int", "integer", "convert", "number"},
		"float(value) - Convert to float": {"float", "decimal", "convert", "number"},
		"str(value) - Convert to string": {"str", "string", "text", "convert"},
		"Array([]) - Array operations": {"array", "list", "collection", "sort", "append"},
		"String() - String manipulation": {"string", "text", "upper", "lower", "find"},
		"Integer() - Integer utilities": {"integer", "number", "binary", "hex", "prime"},
		"Float() - Float operations": {"float", "decimal", "round", "sqrt", "math"},
		"File() - File operations": {"file", "read", "write", "exists", "io"},
		"OS() - System operations": {"os", "system", "directory", "environment", "command"},
		"range() - Number sequences": {"range", "sequence", "numbers", "iterate"},
		"enumerate() - Index-value pairs": {"enumerate", "index", "iterate", "loop"},
	}
	
	for funcDesc, keywords := range functions {
		for _, keyword := range keywords {
			if strings.Contains(keyword, query) || strings.Contains(query, keyword) {
				results = append(results, funcDesc)
				break
			}
		}
	}
	
	return results
}

// showSearchCategories displays function categories for browsing
func showSearchCategories(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "🗂️  FUNCTION CATEGORIES:")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Type Conversion:")
	fmt.Fprintln(out, "  int, float, str, bool, list, tuple")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Text Processing:")
	fmt.Fprintln(out, "  String, upper, lower, find, reverse")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Array/List Operations:")
	fmt.Fprintln(out, "  Array, append, sort, reverse, contains")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Mathematical:")
	fmt.Fprintln(out, "  Integer, Float, max, abs, round, sqrt")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "File & System:")
	fmt.Fprintln(out, "  File, OS, read, write, directory")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Utility:")
	fmt.Fprintln(out, "  print, len, type, range, enumerate")
	fmt.Fprintln(out, "")
}

// Built-in function category displays
func showTypeConversionFunctions(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "🔄 TYPE CONVERSION FUNCTIONS")
	fmt.Fprintln(out, "═══════════════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "int(value)          Convert to integer")
	fmt.Fprintln(out, "  int(\"42\")         → 42")
	fmt.Fprintln(out, "  int(3.14)         → 3")
	fmt.Fprintln(out, "  int(True)         → 1")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "float(value)        Convert to float")
	fmt.Fprintln(out, "  float(\"3.14\")     → 3.14")
	fmt.Fprintln(out, "  float(42)         → 42.0")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "str(value)          Convert to string")
	fmt.Fprintln(out, "  str(42)           → \"42\"")
	fmt.Fprintln(out, "  str([1,2,3])      → \"[1, 2, 3]\"")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "bool(value)         Convert to boolean")
	fmt.Fprintln(out, "  bool(1)           → True")
	fmt.Fprintln(out, "  bool(\"\")          → False")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "list(iterable)      Convert to array")
	fmt.Fprintln(out, "  list(\"hello\")     → [\"h\",\"e\",\"l\",\"l\",\"o\"]")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "tuple(iterable)     Convert to tuple")
	fmt.Fprintln(out, "  tuple([1,2,3])    → (1,2,3)")
	fmt.Fprintln(out, "")
}

func showUtilityFunctions(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "🛠️  UTILITY FUNCTIONS")
	fmt.Fprintln(out, "═══════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "len(object)         Get length of collections")
	fmt.Fprintln(out, "  len(\"hello\")       → 5")
	fmt.Fprintln(out, "  len([1,2,3,4])    → 4")
	fmt.Fprintln(out, "  len({\"a\":1,\"b\":2}) → 2")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "type(object)        Get object type")
	fmt.Fprintln(out, "  type(42)          → \"INTEGER\"")
	fmt.Fprintln(out, "  type(\"hello\")     → \"STRING\"")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "print(*args)        Print values to console")
	fmt.Fprintln(out, "  print(\"Hello\")    → Hello")
	fmt.Fprintln(out, "  print(1,2,3)      → 1 2 3")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "input(prompt)       Read user input")
	fmt.Fprintln(out, "  name = input(\"Name: \")")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "range(start,stop,step) Generate number sequence")
	fmt.Fprintln(out, "  range(5)          → [0,1,2,3,4]")
	fmt.Fprintln(out, "  range(2,8,2)      → [2,4,6]")
	fmt.Fprintln(out, "")
}

func showMathFunctions(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "🔢 MATHEMATICAL FUNCTIONS")
	fmt.Fprintln(out, "══════════════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "max(*args)          Find maximum value")
	fmt.Fprintln(out, "  max(1,5,3,2)      → 5")
	fmt.Fprintln(out, "  max([10,20,15])   → 20")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "abs(value)          Get absolute value")
	fmt.Fprintln(out, "  abs(-42)          → 42")
	fmt.Fprintln(out, "  abs(3.14)         → 3.14")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "ord(char)           Get ASCII code")
	fmt.Fprintln(out, "  ord(\"A\")          → 65")
	fmt.Fprintln(out, "  ord(\"a\")          → 97")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "chr(code)           Get character from code")
	fmt.Fprintln(out, "  chr(65)           → \"A\"")
	fmt.Fprintln(out, "  chr(97)           → \"a\"")
	fmt.Fprintln(out, "")
}

func showCollectionFunctions(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "📦 COLLECTION FUNCTIONS")
	fmt.Fprintln(out, "═══════════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "enumerate(array)    Get index-value pairs")
	fmt.Fprintln(out, "  for i, val in enumerate([\"a\",\"b\"]):")
	fmt.Fprintln(out, "      print(i, val)  # 0 a, 1 b")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "pairs(hash, filter) Get key-value pairs")
	fmt.Fprintln(out, "  for k, v in pairs({\"name\":\"Alice\"}):")
	fmt.Fprintln(out, "      print(k, v)    # name Alice")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "is_sametype(a, b)   Check if same type")
	fmt.Fprintln(out, "  is_sametype(42, 17)     → True")
	fmt.Fprintln(out, "  is_sametype(42, \"42\")   → False")
	fmt.Fprintln(out, "")
}

func showSystemFunctions(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "⚙️  SYSTEM FUNCTIONS")
	fmt.Fprintln(out, "══════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "help()              Show basic help information")
	fmt.Fprintln(out, "version()           Show version information")
	fmt.Fprintln(out, "modules()           List standard library modules")
	fmt.Fprintln(out, "")
}

func showAllBuiltinFunctions(out io.Writer) {
	showTypeConversionFunctions(out)
	showUtilityFunctions(out)
	showMathFunctions(out)
	showCollectionFunctions(out)
	showSystemFunctions(out)
}

// Standard library module displays
func showArrayModule(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "📋 ARRAY MODULE")
	fmt.Fprintln(out, "═══════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Constructor:")
	fmt.Fprintln(out, "  arr = Array([1,2,3,4,5])")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Core Methods:")
	fmt.Fprintln(out, "  .length()         → 5")
	fmt.Fprintln(out, "  .append(6)        Add element to end")
	fmt.Fprintln(out, "  .get(0)           → 1 (supports negative indexing)")
	fmt.Fprintln(out, "  .set(0, 10)       Set element at index")
	fmt.Fprintln(out, "  .contains(3)      → True")
	fmt.Fprintln(out, "  .is_empty()       → False")
	fmt.Fprintln(out, "  .clear()          Remove all elements")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Search & Access:")
	fmt.Fprintln(out, "  .index_of(3)      → 2 (first occurrence)")
	fmt.Fprintln(out, "  .remove(3)        Remove first occurrence")
	fmt.Fprintln(out, "  .first()          Get first element")
	fmt.Fprintln(out, "  .last()           Get last element")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Advanced Operations:")
	fmt.Fprintln(out, "  .slice(1, 3)      Create new array from range")
	fmt.Fprintln(out, "  .reverse()        Create reversed copy")
	fmt.Fprintln(out, "  .sort()           Create sorted copy")
	fmt.Fprintln(out, "  .to_string()      String representation")
	fmt.Fprintln(out, "")
}

func showStringModule(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "📝 STRING MODULE")
	fmt.Fprintln(out, "════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Constructor:")
	fmt.Fprintln(out, "  s = String(\"Hello World\")")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Basic Properties:")
	fmt.Fprintln(out, "  .length()         → 11")
	fmt.Fprintln(out, "  .to_string()      → \"Hello World\"")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Case Conversion:")
	fmt.Fprintln(out, "  .upper()          → \"HELLO WORLD\"")
	fmt.Fprintln(out, "  .lower()          → \"hello world\"")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Search & Access:")
	fmt.Fprintln(out, "  .find(\"World\")    → 6 (index of substring)")
	fmt.Fprintln(out, "  .contains(\"Hello\") → True")
	fmt.Fprintln(out, "  .char_at(0)       → \"H\" (supports negative)")
	fmt.Fprintln(out, "  .char_at(-1)      → \"d\"")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Transformation:")
	fmt.Fprintln(out, "  .reverse()        → \"dlroW olleH\"")
	fmt.Fprintln(out, "")
}

func showIntegerModule(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "🔢 INTEGER MODULE")
	fmt.Fprintln(out, "═════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Constructor:")
	fmt.Fprintln(out, "  i = Integer(42)")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Number Base Conversions:")
	fmt.Fprintln(out, "  .to_bin()         → \"0b101010\"")
	fmt.Fprintln(out, "  .to_oct()         → \"0o52\"")
	fmt.Fprintln(out, "  .to_hex()         → \"0x2a\"")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Mathematical Operations:")
	fmt.Fprintln(out, "  .abs()            → 42 (absolute value)")
	fmt.Fprintln(out, "  .pow(2)           → 1764 (42²)")
	fmt.Fprintln(out, "  .gcd(18)          → 6 (greatest common divisor)")
	fmt.Fprintln(out, "  .lcm(18)          → 126 (least common multiple)")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Utility Methods:")
	fmt.Fprintln(out, "  .is_even()        → True")
	fmt.Fprintln(out, "  .is_odd()         → False")
	fmt.Fprintln(out, "  .is_prime()       → False")
	fmt.Fprintln(out, "  .to_string()      → \"42\"")
	fmt.Fprintln(out, "  .to_float()       → 42.0")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Auto-wrapping: 42.to_bin() works directly!")
	fmt.Fprintln(out, "")
}

func showFloatModule(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "🔢 FLOAT MODULE")
	fmt.Fprintln(out, "═══════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Constructor:")
	fmt.Fprintln(out, "  f = Float(3.14159)")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Rounding & Precision:")
	fmt.Fprintln(out, "  .round(2)         → 3.14")
	fmt.Fprintln(out, "  .floor()          → 3")
	fmt.Fprintln(out, "  .ceil()           → 4")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Mathematical Operations:")
	fmt.Fprintln(out, "  .abs()            Absolute value")
	fmt.Fprintln(out, "  .sqrt()           Square root (Newton's method)")
	fmt.Fprintln(out, "  .pow(2)           Raise to power")
	fmt.Fprintln(out, "  .sin()            Sine (Taylor series)")
	fmt.Fprintln(out, "  .cos()            Cosine (Taylor series)")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Type Checking:")
	fmt.Fprintln(out, "  .is_integer()     → False")
	fmt.Fprintln(out, "  .is_positive()    → True")
	fmt.Fprintln(out, "  .is_negative()    → False")
	fmt.Fprintln(out, "  .is_zero()        → False")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Conversions:")
	fmt.Fprintln(out, "  .to_int()         → 3")
	fmt.Fprintln(out, "  .to_string()      → \"3.14159\"")
	fmt.Fprintln(out, "")
}

func showBooleanModule(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "✅ BOOLEAN MODULE")
	fmt.Fprintln(out, "═════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Constructor:")
	fmt.Fprintln(out, "  b = Boolean(True)")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Conversions:")
	fmt.Fprintln(out, "  .to_int()         → 1 (True), 0 (False)")
	fmt.Fprintln(out, "  .to_string()      → \"True\" or \"False\"")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Logical Operations:")
	fmt.Fprintln(out, "  .negate()         → False (logical NOT)")
	fmt.Fprintln(out, "  .and_with(False)  → False")
	fmt.Fprintln(out, "  .or_with(False)   → True")
	fmt.Fprintln(out, "  .xor_with(True)   → False")
	fmt.Fprintln(out, "  .implies(False)   → False (logical implication)")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Testing:")
	fmt.Fprintln(out, "  .is_true()        → True")
	fmt.Fprintln(out, "  .is_false()       → False")
	fmt.Fprintln(out, "")
}

func showFileModule(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "📁 FILE MODULE")
	fmt.Fprintln(out, "══════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Constructor:")
	fmt.Fprintln(out, "  f = File()")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "File Operations:")
	fmt.Fprintln(out, "  .read(\"data.txt\")         Read entire file as string")
	fmt.Fprintln(out, "  .write(\"out.txt\", data)  Write content (overwrites)")
	fmt.Fprintln(out, "  .append(\"log.txt\", msg)  Append content to file")
	fmt.Fprintln(out, "  .exists(\"file.txt\")      Check if file exists")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Example Usage:")
	fmt.Fprintln(out, "  file = File()")
	fmt.Fprintln(out, "  if file.exists(\"config.txt\"):")
	fmt.Fprintln(out, "      config = file.read(\"config.txt\")")
	fmt.Fprintln(out, "      processed = process_config(config)")
	fmt.Fprintln(out, "      file.write(\"output.txt\", processed)")
	fmt.Fprintln(out, "")
}

func showOSModule(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "💻 OS MODULE")
	fmt.Fprintln(out, "════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Constructor:")
	fmt.Fprintln(out, "  os = OS()")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Directory Operations:")
	fmt.Fprintln(out, "  .cwd()                    Get current directory")
	fmt.Fprintln(out, "  .chdir(\"/path/to/dir\")    Change directory")
	fmt.Fprintln(out, "  .listdir(\".\")             List directory contents")
	fmt.Fprintln(out, "  .mkdir(\"folder\", 0755)    Create directory")
	fmt.Fprintln(out, "  .remove(\"file_or_dir\")    Remove file/directory")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Environment Variables:")
	fmt.Fprintln(out, "  .getenv(\"HOME\")           Get environment variable")
	fmt.Fprintln(out, "  .setenv(\"VAR\", \"value\")   Set environment variable")
	fmt.Fprintln(out, "  .expandEnv(\"$HOME/docs\")  Expand variables in string")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Process Management:")
	fmt.Fprintln(out, "  .run(\"ls\", [\"-la\"], False) Execute system command")
	fmt.Fprintln(out, "  .sleep(2)                 Sleep for seconds")
	fmt.Fprintln(out, "")
}

func showMathModule(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "🧮 MATH MODULE")
	fmt.Fprintln(out, "══════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Currently minimal - placeholder for future expansion")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Available:")
	fmt.Fprintln(out, "  .info()           Returns module information")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Mathematical functions are available through:")
	fmt.Fprintln(out, "  • Float module: .sqrt(), .sin(), .cos()")
	fmt.Fprintln(out, "  • Integer module: .gcd(), .lcm(), .pow()")
	fmt.Fprintln(out, "  • Built-ins: max(), abs()")
	fmt.Fprintln(out, "")
}

func showAllStandardLibrary(out io.Writer) {
	showArrayModule(out)
	showStringModule(out)
	showIntegerModule(out)
	showFloatModule(out)
	showBooleanModule(out)
	showFileModule(out)
	showOSModule(out)
	showMathModule(out)
}

// Language feature displays (add these and other required functions)
func showVariablesAndAssignment(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "📦 VARIABLES & ASSIGNMENT")
	fmt.Fprintln(out, "═════════════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Basic Assignment:")
	fmt.Fprintln(out, "  x = 42")
	fmt.Fprintln(out, "  name = \"Alice\"")
	fmt.Fprintln(out, "  is_active = True")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Tuple Unpacking:")
	fmt.Fprintln(out, "  x, y = (10, 20)")
	fmt.Fprintln(out, "  a, b, c = [1, 2, 3]")
	fmt.Fprintln(out, "  first, *rest = [1, 2, 3, 4, 5]")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Compound Assignment:")
	fmt.Fprintln(out, "  x += 5    # x = x + 5")
	fmt.Fprintln(out, "  y -= 3    # y = y - 3")
	fmt.Fprintln(out, "  z *= 2    # z = z * 2")
	fmt.Fprintln(out, "  w /= 4    # w = w / 4")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Increment/Decrement:")
	fmt.Fprintln(out, "  x++       # Post-increment (returns old value)")
	fmt.Fprintln(out, "  ++x       # Pre-increment (returns new value)")
	fmt.Fprintln(out, "  y--       # Post-decrement")
	fmt.Fprintln(out, "  --y       # Pre-decrement")
	fmt.Fprintln(out, "")
}

func showControlFlow(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "🔀 CONTROL FLOW")
	fmt.Fprintln(out, "═══════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "If Statements:")
	fmt.Fprintln(out, "  if condition:")
	fmt.Fprintln(out, "      // code")
	fmt.Fprintln(out, "  otherwise another_condition:")
	fmt.Fprintln(out, "      // code")
	fmt.Fprintln(out, "  else:")
	fmt.Fprintln(out, "      // code")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "For Loops:")
	fmt.Fprintln(out, "  for item in array:")
	fmt.Fprintln(out, "      print(item)")
	fmt.Fprintln(out, "  ")
	fmt.Fprintln(out, "  for i in range(5):")
	fmt.Fprintln(out, "      print(i)")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "While Loops:")
	fmt.Fprintln(out, "  while condition:")
	fmt.Fprintln(out, "      // code")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Match Statements:")
	fmt.Fprintln(out, "  match value:")
	fmt.Fprintln(out, "      case \"option1\":")
	fmt.Fprintln(out, "          // code")
	fmt.Fprintln(out, "      case \"option2\":")
	fmt.Fprintln(out, "          // code")
	fmt.Fprintln(out, "      _:")
	fmt.Fprintln(out, "          // default")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Loop Control:")
	fmt.Fprintln(out, "  skip      # Continue to next iteration")
	fmt.Fprintln(out, "  stop      # Break from loop")
	fmt.Fprintln(out, "")
}

func showFunctions(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "🪄 FUNCTIONS (SPELLS)")
	fmt.Fprintln(out, "═══════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Basic Function:")
	fmt.Fprintln(out, "  spell greet(name):")
	fmt.Fprintln(out, "      return f\"Hello, {name}!\"")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "With Default Parameters:")
	fmt.Fprintln(out, "  spell power(base, exponent = 2):")
	fmt.Fprintln(out, "      return base ** exponent")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Multiple Parameters:")
	fmt.Fprintln(out, "  spell calculate(operation, a, b):")
	fmt.Fprintln(out, "      match operation:")
	fmt.Fprintln(out, "          case \"add\":")
	fmt.Fprintln(out, "              return a + b")
	fmt.Fprintln(out, "          case \"multiply\":")
	fmt.Fprintln(out, "              return a * b")
	fmt.Fprintln(out, "          _:")
	fmt.Fprintln(out, "              return \"Unknown operation\"")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Calling Functions:")
	fmt.Fprintln(out, "  message = greet(\"World\")")
	fmt.Fprintln(out, "  square = power(5)")
	fmt.Fprintln(out, "  cube = power(5, 3)")
	fmt.Fprintln(out, "")
}

func showClasses(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "🏛️  CLASSES (GRIMOIRES)")
	fmt.Fprintln(out, "════════════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Basic Class:")
	fmt.Fprintln(out, "  grim Person:")
	fmt.Fprintln(out, "      init(name, age):")
	fmt.Fprintln(out, "          self.name = name")
	fmt.Fprintln(out, "          self.age = age")
	fmt.Fprintln(out, "      ")
	fmt.Fprintln(out, "      spell greet():")
	fmt.Fprintln(out, "          return f\"Hi, I'm {self.name}\"")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Inheritance:")
	fmt.Fprintln(out, "  grim Student(Person):")
	fmt.Fprintln(out, "      init(name, age, school):")
	fmt.Fprintln(out, "          super.init(name, age)")
	fmt.Fprintln(out, "          self.school = school")
	fmt.Fprintln(out, "      ")
	fmt.Fprintln(out, "      spell study():")
	fmt.Fprintln(out, "          return f\"{self.name} is studying\"")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Abstract Classes:")
	fmt.Fprintln(out, "  arcane grim Shape:")
	fmt.Fprintln(out, "      @arcanespell")
	fmt.Fprintln(out, "      spell area():")
	fmt.Fprintln(out, "          ignore  # Abstract method")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Usage:")
	fmt.Fprintln(out, "  person = Person(\"Alice\", 30)")
	fmt.Fprintln(out, "  print(person.greet())")
	fmt.Fprintln(out, "")
}

func showErrorHandling(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "🛡️  ERROR HANDLING")
	fmt.Fprintln(out, "═════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Basic Error Handling:")
	fmt.Fprintln(out, "  attempt:")
	fmt.Fprintln(out, "      result = risky_operation()")
	fmt.Fprintln(out, "  ensnare:")
	fmt.Fprintln(out, "      print(\"Something went wrong\")")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Specific Error Types:")
	fmt.Fprintln(out, "  attempt:")
	fmt.Fprintln(out, "      number = int(user_input)")
	fmt.Fprintln(out, "  ensnare (ValueError):")
	fmt.Fprintln(out, "      print(\"Invalid number format\")")
	fmt.Fprintln(out, "  ensnare:")
	fmt.Fprintln(out, "      print(\"Other error occurred\")")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "With Finally Block:")
	fmt.Fprintln(out, "  attempt:")
	fmt.Fprintln(out, "      file = open(\"data.txt\")")
	fmt.Fprintln(out, "      process_file(file)")
	fmt.Fprintln(out, "  ensnare:")
	fmt.Fprintln(out, "      print(\"File processing failed\")")
	fmt.Fprintln(out, "  resolve:")
	fmt.Fprintln(out, "      print(\"Cleanup completed\")")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Raising Errors:")
	fmt.Fprintln(out, "  if age < 0:")
	fmt.Fprintln(out, "      raise Error(\"ValueError\", \"Age cannot be negative\")")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Assertions:")
	fmt.Fprintln(out, "  check(age >= 0, \"Age must be non-negative\")")
	fmt.Fprintln(out, "")
}

func showModules(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "📦 MODULES & IMPORTS")
	fmt.Fprintln(out, "═══════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Basic Import:")
	fmt.Fprintln(out, "  import \"math_utils\"")
	fmt.Fprintln(out, "  import \"utils/helpers\"")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Specific Imports:")
	fmt.Fprintln(out, "  import \"data_structures.Stack\"")
	fmt.Fprintln(out, "  import \"utilities.FileHelper\"")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Import with Alias:")
	fmt.Fprintln(out, "  import \"very_long_module_name\" as short")
	fmt.Fprintln(out, "  import \"math_operations\" as math_ops")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "File Organization:")
	fmt.Fprintln(out, "  main.crl           # Main application")
	fmt.Fprintln(out, "  utils/")
	fmt.Fprintln(out, "    string_utils.crl # String utilities")
	fmt.Fprintln(out, "    math_utils.crl   # Math functions")
	fmt.Fprintln(out, "  models/")
	fmt.Fprintln(out, "    user.crl         # User model")
	fmt.Fprintln(out, "    product.crl      # Product model")
	fmt.Fprintln(out, "")
}

func showDataTypes(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "📊 DATA TYPES")
	fmt.Fprintln(out, "═════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Primitive Types:")
	fmt.Fprintln(out, "  Integer    42, -17, 0")
	fmt.Fprintln(out, "  Float      3.14, -2.5, 0.0")
	fmt.Fprintln(out, "  String     \"hello\", 'world', \"\"")
	fmt.Fprintln(out, "  Boolean    True, False")
	fmt.Fprintln(out, "  None       None")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Collection Types:")
	fmt.Fprintln(out, "  Array      [1, 2, 3, 4]")
	fmt.Fprintln(out, "  Hash       {\"name\": \"Alice\", \"age\": 30}")
	fmt.Fprintln(out, "  Tuple      (1, 2, 3)")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Type Checking:")
	fmt.Fprintln(out, "  type(42)           → \"INTEGER\"")
	fmt.Fprintln(out, "  type(3.14)         → \"FLOAT\"")
	fmt.Fprintln(out, "  type(\"hello\")      → \"STRING\"")
	fmt.Fprintln(out, "  type([1,2,3])      → \"ARRAY\"")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Auto-wrapping:")
	fmt.Fprintln(out, "  42.to_bin()        # Integer methods work directly")
	fmt.Fprintln(out, "  \"hello\".upper()    # String methods work directly")
	fmt.Fprintln(out, "  3.14.round(1)      # Float methods work directly")
	fmt.Fprintln(out, "")
}

func showOperators(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "⚡ OPERATORS")
	fmt.Fprintln(out, "═══════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Arithmetic:")
	fmt.Fprintln(out, "  +, -, *, /         Basic math")
	fmt.Fprintln(out, "  //, %              Integer division, modulo")
	fmt.Fprintln(out, "  **                 Exponentiation")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Comparison:")
	fmt.Fprintln(out, "  ==, !=             Equal, not equal")
	fmt.Fprintln(out, "  <, >, <=, >=       Less/greater than")
	fmt.Fprintln(out, "  in, not in         Membership test")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Logical:")
	fmt.Fprintln(out, "  and, or, not       Boolean logic")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Assignment:")
	fmt.Fprintln(out, "  =                  Basic assignment")
	fmt.Fprintln(out, "  +=, -=, *=, /=     Compound assignment")
	fmt.Fprintln(out, "  ++, --             Increment/decrement")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Bitwise:")
	fmt.Fprintln(out, "  &, |, ^            AND, OR, XOR")
	fmt.Fprintln(out, "  ~                  NOT")
	fmt.Fprintln(out, "  <<, >>             Left/right shift")
	fmt.Fprintln(out, "")
}

func showAllLanguageFeatures(out io.Writer) {
	showVariablesAndAssignment(out)
	showControlFlow(out)
	showFunctions(out)
	showClasses(out)
	showErrorHandling(out)
	showModules(out)
	showDataTypes(out)
	showOperators(out)
}

// Example displays
func showBasicExamples(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "👋 HELLO WORLD & BASICS")
	fmt.Fprintln(out, "═══════════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Hello World:")
	fmt.Fprintln(out, "  print(\"Hello, World!\")")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Variables:")
	fmt.Fprintln(out, "  name = \"Alice\"")
	fmt.Fprintln(out, "  age = 30")
	fmt.Fprintln(out, "  print(f\"Hello, {name}! You are {age} years old.\")")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Simple Math:")
	fmt.Fprintln(out, "  a = 10")
	fmt.Fprintln(out, "  b = 20")
	fmt.Fprintln(out, "  sum = a + b")
	fmt.Fprintln(out, "  print(f\"{a} + {b} = {sum}\")")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "User Input:")
	fmt.Fprintln(out, "  name = input(\"What's your name? \")")
	fmt.Fprintln(out, "  age = int(input(\"How old are you? \"))")
	fmt.Fprintln(out, "  print(f\"Nice to meet you, {name}!\")")
	fmt.Fprintln(out, "")
}

func showArrayExamples(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "📋 ARRAY EXAMPLES")
	fmt.Fprintln(out, "═════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Creating and Using Arrays:")
	fmt.Fprintln(out, "  numbers = [3, 1, 4, 1, 5, 9, 2, 6]")
	fmt.Fprintln(out, "  arr = Array(numbers)")
	fmt.Fprintln(out, "  ")
	fmt.Fprintln(out, "  print(f\"Length: {arr.length()}\")")
	fmt.Fprintln(out, "  print(f\"Contains 5: {arr.contains(5)}\")")
	fmt.Fprintln(out, "  print(f\"Index of 4: {arr.index_of(4)}\")")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Sorting and Manipulation:")
	fmt.Fprintln(out, "  sorted_arr = arr.sort()")
	fmt.Fprintln(out, "  reversed_arr = arr.reverse()")
	fmt.Fprintln(out, "  ")
	fmt.Fprintln(out, "  print(f\"Original: {arr.to_string()}\")")
	fmt.Fprintln(out, "  print(f\"Sorted: {sorted_arr.to_string()}\")")
	fmt.Fprintln(out, "  print(f\"Reversed: {reversed_arr.to_string()}\")")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Finding Maximum:")
	fmt.Fprintln(out, "  maximum = max(numbers)")
	fmt.Fprintln(out, "  print(f\"Maximum value: {maximum}\")")
	fmt.Fprintln(out, "")
}

func showStringExamples(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "📝 STRING EXAMPLES")
	fmt.Fprintln(out, "══════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "String Processing:")
	fmt.Fprintln(out, "  text = \"Hello, World!\"")
	fmt.Fprintln(out, "  s = String(text)")
	fmt.Fprintln(out, "  ")
	fmt.Fprintln(out, "  print(f\"Original: {s.to_string()}\")")
	fmt.Fprintln(out, "  print(f\"Uppercase: {s.upper()}\")")
	fmt.Fprintln(out, "  print(f\"Lowercase: {s.lower()}\")")
	fmt.Fprintln(out, "  print(f\"Reversed: {s.reverse()}\")")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Searching in Strings:")
	fmt.Fprintln(out, "  sentence = \"The quick brown fox jumps\"")
	fmt.Fprintln(out, "  s = String(sentence)")
	fmt.Fprintln(out, "  ")
	fmt.Fprintln(out, "  if s.contains(\"fox\"):")
	fmt.Fprintln(out, "      index = s.find(\"fox\")")
	fmt.Fprintln(out, "      print(f\"Found 'fox' at index {index}\")")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Character Access:")
	fmt.Fprintln(out, "  word = \"Python\"")
	fmt.Fprintln(out, "  s = String(word)")
	fmt.Fprintln(out, "  ")
	fmt.Fprintln(out, "  print(f\"First character: {s.char_at(0)}\")")
	fmt.Fprintln(out, "  print(f\"Last character: {s.char_at(-1)}\")")
	fmt.Fprintln(out, "")
}

func showFileExamples(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "📁 FILE EXAMPLES")
	fmt.Fprintln(out, "════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Reading and Writing Files:")
	fmt.Fprintln(out, "  file = File()")
	fmt.Fprintln(out, "  ")
	fmt.Fprintln(out, "  // Write data to file")
	fmt.Fprintln(out, "  data = \"Hello, Carrion!\"")
	fmt.Fprintln(out, "  file.write(\"greeting.txt\", data)")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "  // Read data from file")
	fmt.Fprintln(out, "  if file.exists(\"greeting.txt\"):")
	fmt.Fprintln(out, "      content = file.read(\"greeting.txt\")")
	fmt.Fprintln(out, "      print(f\"File content: {content}\")")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Log File Example:")
	fmt.Fprintln(out, "  file = File()")
	fmt.Fprintln(out, "  ")
	fmt.Fprintln(out, "  spell log_message(message):")
	fmt.Fprintln(out, "      timestamp = get_current_time()  // Assuming this exists")
	fmt.Fprintln(out, "      log_entry = f\"[{timestamp}] {message}\\n\"")
	fmt.Fprintln(out, "      file.append(\"app.log\", log_entry)")
	fmt.Fprintln(out, "  ")
	fmt.Fprintln(out, "  log_message(\"Application started\")")
	fmt.Fprintln(out, "  log_message(\"User logged in\")")
	fmt.Fprintln(out, "")
}

func showMathExamples(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "🧮 MATHEMATICAL EXAMPLES")
	fmt.Fprintln(out, "════════════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Number Base Conversions:")
	fmt.Fprintln(out, "  number = 42")
	fmt.Fprintln(out, "  i = Integer(number)")
	fmt.Fprintln(out, "  ")
	fmt.Fprintln(out, "  print(f\"Decimal: {number}\")")
	fmt.Fprintln(out, "  print(f\"Binary: {i.to_bin()}\")")
	fmt.Fprintln(out, "  print(f\"Octal: {i.to_oct()}\")")
	fmt.Fprintln(out, "  print(f\"Hexadecimal: {i.to_hex()}\")")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Prime Number Checker:")
	fmt.Fprintln(out, "  spell check_prime(n):")
	fmt.Fprintln(out, "      i = Integer(n)")
	fmt.Fprintln(out, "      if i.is_prime():")
	fmt.Fprintln(out, "          print(f\"{n} is prime\")")
	fmt.Fprintln(out, "      else:")
	fmt.Fprintln(out, "          print(f\"{n} is not prime\")")
	fmt.Fprintln(out, "  ")
	fmt.Fprintln(out, "  for num in range(2, 20):")
	fmt.Fprintln(out, "      check_prime(num)")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Float Operations:")
	fmt.Fprintln(out, "  pi = 3.14159")
	fmt.Fprintln(out, "  f = Float(pi)")
	fmt.Fprintln(out, "  ")
	fmt.Fprintln(out, "  print(f\"Pi: {pi}\")")
	fmt.Fprintln(out, "  print(f\"Rounded: {f.round(2)}\")")
	fmt.Fprintln(out, "  print(f\"Square root: {f.sqrt()}\")")
	fmt.Fprintln(out, "")
}

func showOOPExamples(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "🏛️  OOP EXAMPLES")
	fmt.Fprintln(out, "══════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Bank Account Class:")
	fmt.Fprintln(out, "  grim BankAccount:")
	fmt.Fprintln(out, "      init(account_number, initial_balance = 0):")
	fmt.Fprintln(out, "          self.account_number = account_number")
	fmt.Fprintln(out, "          self.balance = initial_balance")
	fmt.Fprintln(out, "      ")
	fmt.Fprintln(out, "      spell deposit(amount):")
	fmt.Fprintln(out, "          if amount > 0:")
	fmt.Fprintln(out, "              self.balance += amount")
	fmt.Fprintln(out, "              return True")
	fmt.Fprintln(out, "          return False")
	fmt.Fprintln(out, "      ")
	fmt.Fprintln(out, "      spell withdraw(amount):")
	fmt.Fprintln(out, "          if amount > 0 and amount <= self.balance:")
	fmt.Fprintln(out, "              self.balance -= amount")
	fmt.Fprintln(out, "              return True")
	fmt.Fprintln(out, "          return False")
	fmt.Fprintln(out, "      ")
	fmt.Fprintln(out, "      spell get_balance():")
	fmt.Fprintln(out, "          return self.balance")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Usage:")
	fmt.Fprintln(out, "  account = BankAccount(\"12345\", 1000)")
	fmt.Fprintln(out, "  account.deposit(500)")
	fmt.Fprintln(out, "  account.withdraw(200)")
	fmt.Fprintln(out, "  print(f\"Balance: ${account.get_balance()}\")")
	fmt.Fprintln(out, "")
}

func showErrorExamples(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "🛡️  ERROR HANDLING EXAMPLES")
	fmt.Fprintln(out, "═══════════════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Safe Division:")
	fmt.Fprintln(out, "  spell safe_divide(a, b):")
	fmt.Fprintln(out, "      attempt:")
	fmt.Fprintln(out, "          if b == 0:")
	fmt.Fprintln(out, "              raise Error(\"ZeroDivision\", \"Cannot divide by zero\")")
	fmt.Fprintln(out, "          return a / b")
	fmt.Fprintln(out, "      ensnare:")
	fmt.Fprintln(out, "          print(\"Division error occurred\")")
	fmt.Fprintln(out, "          return None")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "File Processing with Cleanup:")
	fmt.Fprintln(out, "  spell process_file(filename):")
	fmt.Fprintln(out, "      file = File()")
	fmt.Fprintln(out, "      attempt:")
	fmt.Fprintln(out, "          if not file.exists(filename):")
	fmt.Fprintln(out, "              raise Error(\"FileNotFound\", f\"File {filename} not found\")")
	fmt.Fprintln(out, "          ")
	fmt.Fprintln(out, "          content = file.read(filename)")
	fmt.Fprintln(out, "          return content.upper()")
	fmt.Fprintln(out, "      ensnare:")
	fmt.Fprintln(out, "          print(f\"Error processing {filename}\")")
	fmt.Fprintln(out, "          return None")
	fmt.Fprintln(out, "      resolve:")
	fmt.Fprintln(out, "          print(\"File processing completed\")")
	fmt.Fprintln(out, "")
}

func showMiniPrograms(out io.Writer) {
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "🎯 COMPLETE MINI PROGRAMS")
	fmt.Fprintln(out, "═════════════════════════")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Factorial Calculator:")
	fmt.Fprintln(out, "  spell factorial(n):")
	fmt.Fprintln(out, "      if n <= 1:")
	fmt.Fprintln(out, "          return 1")
	fmt.Fprintln(out, "      return n * factorial(n - 1)")
	fmt.Fprintln(out, "  ")
	fmt.Fprintln(out, "  number = int(input(\"Enter a number: \"))")
	fmt.Fprintln(out, "  result = factorial(number)")
	fmt.Fprintln(out, "  print(f\"{number}! = {result}\")")
	fmt.Fprintln(out, "")
	fmt.Fprintln(out, "Number Guessing Game:")
	fmt.Fprintln(out, "  import \"random\"  // Assuming random module exists")
	fmt.Fprintln(out, "  ")
	fmt.Fprintln(out, "  target = random.randint(1, 100)")
	fmt.Fprintln(out, "  attempts = 0")
	fmt.Fprintln(out, "  ")
	fmt.Fprintln(out, "  print(\"Guess the number between 1 and 100!\")")
	fmt.Fprintln(out, "  ")
	fmt.Fprintln(out, "  while True:")
	fmt.Fprintln(out, "      guess = int(input(\"Your guess: \"))")
	fmt.Fprintln(out, "      attempts += 1")
	fmt.Fprintln(out, "      ")
	fmt.Fprintln(out, "      if guess == target:")
	fmt.Fprintln(out, "          print(f\"Correct! You won in {attempts} attempts!\")")
	fmt.Fprintln(out, "          stop")
	fmt.Fprintln(out, "      otherwise guess < target:")
	fmt.Fprintln(out, "          print(\"Too low!\")")
	fmt.Fprintln(out, "      else:")
	fmt.Fprintln(out, "          print(\"Too high!\")")
	fmt.Fprintln(out, "")
}

func showAllExamples(out io.Writer) {
	showBasicExamples(out)
	showArrayExamples(out)
	showStringExamples(out)
	showFileExamples(out)
	showMathExamples(out)
	showOOPExamples(out)
	showErrorExamples(out)
	showMiniPrograms(out)
}