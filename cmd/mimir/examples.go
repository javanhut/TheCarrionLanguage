package main

import "fmt"

// Example displays
func showBasicExamples() {
	fmt.Println("")
	fmt.Println("HELLO WORLD & BASICS")
	fmt.Println("═══════════════════════")
	fmt.Println("")
	fmt.Println("Hello World:")
	fmt.Println("  print(\"Hello, World!\")")
	fmt.Println("")
	fmt.Println("Variables:")
	fmt.Println("  name = \"Alice\"")
	fmt.Println("  age = 30")
	fmt.Println("  print(f\"Hello, {name}! You are {age} years old.\")")
	fmt.Println("")
	fmt.Println("Simple Math:")
	fmt.Println("  a = 10")
	fmt.Println("  b = 20")
	fmt.Println("  sum = a + b")
	fmt.Println("  print(f\"{a} + {b} = {sum}\")")
	fmt.Println("")
	fmt.Println("User Input:")
	fmt.Println("  name = input(\"What's your name? \")")
	fmt.Println("  age = int(input(\"How old are you? \"))")
	fmt.Println("  print(f\"Nice to meet you, {name}!\")")
	fmt.Println("")
}

func showArrayExamples() {
	fmt.Println("")
	fmt.Println("ARRAY EXAMPLES")
	fmt.Println("═════════════════")
	fmt.Println("")
	fmt.Println("Creating and Using Arrays:")
	fmt.Println("  numbers = [3, 1, 4, 1, 5, 9, 2, 6]")
	fmt.Println("  arr = Array(numbers)")
	fmt.Println("  ")
	fmt.Println("  print(f\"Length: {arr.length()}\")")
	fmt.Println("  print(f\"Contains 5: {arr.contains(5)}\")")
	fmt.Println("  print(f\"Index of 4: {arr.index_of(4)}\")")
	fmt.Println("")
	fmt.Println("Sorting and Manipulation:")
	fmt.Println("  sorted_arr = arr.sort()")
	fmt.Println("  reversed_arr = arr.reverse()")
	fmt.Println("  ")
	fmt.Println("  print(f\"Original: {arr.to_string()}\")")
	fmt.Println("  print(f\"Sorted: {sorted_arr.to_string()}\")")
	fmt.Println("  print(f\"Reversed: {reversed_arr.to_string()}\")")
	fmt.Println("")
	fmt.Println("Finding Maximum:")
	fmt.Println("  maximum = max(numbers)")
	fmt.Println("  print(f\"Maximum value: {maximum}\")")
	fmt.Println("")
}

func showStringExamples() {
	fmt.Println("")
	fmt.Println("STRING EXAMPLES")
	fmt.Println("══════════════════")
	fmt.Println("")
	fmt.Println("String Processing:")
	fmt.Println("  text = \"Hello, World!\"")
	fmt.Println("  s = String(text)")
	fmt.Println("  ")
	fmt.Println("  print(f\"Original: {s.to_string()}\")")
	fmt.Println("  print(f\"Uppercase: {s.upper()}\")")
	fmt.Println("  print(f\"Lowercase: {s.lower()}\")")
	fmt.Println("  print(f\"Reversed: {s.reverse()}\")")
	fmt.Println("")
	fmt.Println("Searching in Strings:")
	fmt.Println("  sentence = \"The quick brown fox jumps\"")
	fmt.Println("  s = String(sentence)")
	fmt.Println("  ")
	fmt.Println("  if s.contains(\"fox\"):")
	fmt.Println("      index = s.find(\"fox\")")
	fmt.Println("      print(f\"Found 'fox' at index {index}\")")
	fmt.Println("")
	fmt.Println("Character Access:")
	fmt.Println("  word = \"Python\"")
	fmt.Println("  s = String(word)")
	fmt.Println("  ")
	fmt.Println("  print(f\"First character: {s.char_at(0)}\")")
	fmt.Println("  print(f\"Last character: {s.char_at(-1)}\")")
	fmt.Println("")
}

func showFileExamples() {
	fmt.Println("")
	fmt.Println("FILE EXAMPLES")
	fmt.Println("════════════════")
	fmt.Println("")
	fmt.Println("Reading and Writing Files:")
	fmt.Println("  file = File()")
	fmt.Println("  ")
	fmt.Println("  # Write data to file")
	fmt.Println("  data = \"Hello, Carrion!\"")
	fmt.Println("  file.write(\"greeting.txt\", data)")
	fmt.Println("")
	fmt.Println("  # Read data from file")
	fmt.Println("  if file.exists(\"greeting.txt\"):")
	fmt.Println("      content = file.read(\"greeting.txt\")")
	fmt.Println("      print(f\"File content: {content}\")")
	fmt.Println("")
	fmt.Println("Log File Example:")
	fmt.Println("  file = File()")
	fmt.Println("  ")
	fmt.Println("  spell log_message(message):")
	fmt.Println("      timestamp = get_current_time()  # Assuming this exists")
	fmt.Println("      log_entry = f\"[{timestamp}] {message}\\n\"")
	fmt.Println("      file.append(\"app.log\", log_entry)")
	fmt.Println("  ")
	fmt.Println("  log_message(\"Application started\")")
	fmt.Println("  log_message(\"User logged in\")")
	fmt.Println("")
}

func showMathExamples() {
	fmt.Println("")
	fmt.Println("MATHEMATICAL EXAMPLES")
	fmt.Println("════════════════════════")
	fmt.Println("")
	fmt.Println("Number Base Conversions:")
	fmt.Println("  number = 42")
	fmt.Println("  i = Integer(number)")
	fmt.Println("  ")
	fmt.Println("  print(f\"Decimal: {number}\")")
	fmt.Println("  print(f\"Binary: {i.to_bin()}\")")
	fmt.Println("  print(f\"Octal: {i.to_oct()}\")")
	fmt.Println("  print(f\"Hexadecimal: {i.to_hex()}\")")
	fmt.Println("")
	fmt.Println("Prime Number Checker:")
	fmt.Println("  spell check_prime(n):")
	fmt.Println("      i = Integer(n)")
	fmt.Println("      if i.is_prime():")
	fmt.Println("          print(f\"{n} is prime\")")
	fmt.Println("      else:")
	fmt.Println("          print(f\"{n} is not prime\")")
	fmt.Println("  ")
	fmt.Println("  for num in range(2, 20):")
	fmt.Println("      check_prime(num)")
	fmt.Println("")
	fmt.Println("Float Operations:")
	fmt.Println("  pi = 3.14159")
	fmt.Println("  f = Float(pi)")
	fmt.Println("  ")
	fmt.Println("  print(f\"Pi: {pi}\")")
	fmt.Println("  print(f\"Rounded: {f.round(2)}\")")
	fmt.Println("  print(f\"Square root: {f.sqrt()}\")")
	fmt.Println("")
}

func showOOPExamples() {
	fmt.Println("")
	fmt.Println("OOP EXAMPLES")
	fmt.Println("══════════════")
	fmt.Println("")
	fmt.Println("Bank Account Class:")
	fmt.Println("  grim BankAccount:")
	fmt.Println("      init(account_number, initial_balance = 0):")
	fmt.Println("          self.account_number = account_number")
	fmt.Println("          self.balance = initial_balance")
	fmt.Println("      ")
	fmt.Println("      spell deposit(amount):")
	fmt.Println("          if amount > 0:")
	fmt.Println("              self.balance += amount")
	fmt.Println("              return True")
	fmt.Println("          return False")
	fmt.Println("      ")
	fmt.Println("      spell withdraw(amount):")
	fmt.Println("          if amount > 0 and amount <= self.balance:")
	fmt.Println("              self.balance -= amount")
	fmt.Println("              return True")
	fmt.Println("          return False")
	fmt.Println("      ")
	fmt.Println("      spell get_balance():")
	fmt.Println("          return self.balance")
	fmt.Println("")
	fmt.Println("Usage:")
	fmt.Println("  account = BankAccount(\"12345\", 1000)")
	fmt.Println("  account.deposit(500)")
	fmt.Println("  account.withdraw(200)")
	fmt.Println("  print(f\"Balance: ${account.get_balance()}\")")
	fmt.Println("")
}

func showErrorExamples() {
	fmt.Println("")
	fmt.Println("ERROR HANDLING EXAMPLES")
	fmt.Println("═══════════════════════════")
	fmt.Println("")
	fmt.Println("Safe Division:")
	fmt.Println("  spell safe_divide(a, b):")
	fmt.Println("      attempt:")
	fmt.Println("          if b == 0:")
	fmt.Println("              raise Error(\"ZeroDivision\", \"Cannot divide by zero\")")
	fmt.Println("          return a / b")
	fmt.Println("      ensnare:")
	fmt.Println("          print(\"Division error occurred\")")
	fmt.Println("          return None")
	fmt.Println("")
	fmt.Println("File Processing with Cleanup:")
	fmt.Println("  spell process_file(filename):")
	fmt.Println("      file = File()")
	fmt.Println("      attempt:")
	fmt.Println("          if not file.exists(filename):")
	fmt.Println("              raise Error(\"FileNotFound\", f\"File {filename} not found\")")
	fmt.Println("          ")
	fmt.Println("          content = file.read(filename)")
	fmt.Println("          return content.upper()")
	fmt.Println("      ensnare:")
	fmt.Println("          print(f\"Error processing {filename}\")")
	fmt.Println("          return None")
	fmt.Println("      resolve:")
	fmt.Println("          print(\"File processing completed\")")
	fmt.Println("")
}

func showMiniPrograms() {
	fmt.Println("")
	fmt.Println("COMPLETE MINI PROGRAMS")
	fmt.Println("═════════════════════════")
	fmt.Println("")
	fmt.Println("Factorial Calculator:")
	fmt.Println("  spell factorial(n):")
	fmt.Println("      if n <= 1:")
	fmt.Println("          return 1")
	fmt.Println("      return n * factorial(n - 1)")
	fmt.Println("  ")
	fmt.Println("  number = int(input(\"Enter a number: \"))")
	fmt.Println("  result = factorial(number)")
	fmt.Println("  print(f\"{number}! = {result}\")")
	fmt.Println("")
	fmt.Println("Number Guessing Game:")
	fmt.Println("  import \"random\"  # Assuming random module exists")
	fmt.Println("  ")
	fmt.Println("  target = random.randint(1, 100)")
	fmt.Println("  attempts = 0")
	fmt.Println("  ")
	fmt.Println("  print(\"Guess the number between 1 and 100!\")")
	fmt.Println("  ")
	fmt.Println("  while True:")
	fmt.Println("      guess = int(input(\"Your guess: \"))")
	fmt.Println("      attempts += 1")
	fmt.Println("      ")
	fmt.Println("      if guess == target:")
	fmt.Println("          print(f\"Correct! You won in {attempts} attempts!\")")
	fmt.Println("          stop")
	fmt.Println("      otherwise guess < target:")
	fmt.Println("          print(\"Too low!\")")
	fmt.Println("      else:")
	fmt.Println("          print(\"Too high!\")")
	fmt.Println("")
}

func showAllExamples() {
	showBasicExamples()
	showArrayExamples()
	showStringExamples()
	showFileExamples()
	showMathExamples()
	showOOPExamples()
	showErrorExamples()
	showMiniPrograms()
}