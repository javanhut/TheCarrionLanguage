package main

import "fmt"

// All the display functions for types, modules, etc.
func showTypeConversionFunctions() {
	fmt.Println("")
	fmt.Println("TYPE CONVERSION FUNCTIONS")
	fmt.Println("═══════════════════════════")
	fmt.Println("")
	fmt.Println("int(value)          Convert to integer")
	fmt.Println("  int(\"42\")         → 42")
	fmt.Println("  int(3.14)         → 3")
	fmt.Println("  int(True)         → 1")
	fmt.Println("")
	fmt.Println("float(value)        Convert to float")
	fmt.Println("  float(\"3.14\")     → 3.14")
	fmt.Println("  float(42)         → 42.0")
	fmt.Println("")
	fmt.Println("str(value)          Convert to string")
	fmt.Println("  str(42)           → \"42\"")
	fmt.Println("  str([1,2,3])      → \"[1, 2, 3]\"")
	fmt.Println("")
	fmt.Println("bool(value)         Convert to boolean")
	fmt.Println("  bool(1)           → True")
	fmt.Println("  bool(\"\")          → False")
	fmt.Println("")
	fmt.Println("list(iterable)      Convert to array")
	fmt.Println("  list(\"hello\")     → [\"h\",\"e\",\"l\",\"l\",\"o\"]")
	fmt.Println("")
	fmt.Println("tuple(iterable)     Convert to tuple")
	fmt.Println("  tuple([1,2,3])    → (1,2,3)")
	fmt.Println("")
}

func showUtilityFunctions() {
	fmt.Println("")
	fmt.Println("UTILITY FUNCTIONS")
	fmt.Println("═══════════════════")
	fmt.Println("")
	fmt.Println("len(object)         Get length of collections")
	fmt.Println("  len(\"hello\")       → 5")
	fmt.Println("  len([1,2,3,4])    → 4")
	fmt.Println("  len({\"a\":1,\"b\":2}) → 2")
	fmt.Println("")
	fmt.Println("type(object)        Get object type")
	fmt.Println("  type(42)          → \"INTEGER\"")
	fmt.Println("  type(\"hello\")     → \"STRING\"")
	fmt.Println("")
	fmt.Println("print(*args)        Print values to console")
	fmt.Println("  print(\"Hello\")    → Hello")
	fmt.Println("  print(1,2,3)      → 1 2 3")
	fmt.Println("")
	fmt.Println("input(prompt)       Read user input")
	fmt.Println("  name = input(\"Name: \")")
	fmt.Println("")
	fmt.Println("range(start,stop,step) Generate number sequence")
	fmt.Println("  range(5)          → [0,1,2,3,4]")
	fmt.Println("  range(2,8,2)      → [2,4,6]")
	fmt.Println("")
}

func showMathFunctions() {
	fmt.Println("")
	fmt.Println("MATHEMATICAL FUNCTIONS")
	fmt.Println("══════════════════════════")
	fmt.Println("")
	fmt.Println("max(*args)          Find maximum value")
	fmt.Println("  max(1,5,3,2)      → 5")
	fmt.Println("  max([10,20,15])   → 20")
	fmt.Println("")
	fmt.Println("abs(value)          Get absolute value")
	fmt.Println("  abs(-42)          → 42")
	fmt.Println("  abs(3.14)         → 3.14")
	fmt.Println("")
	fmt.Println("ord(char)           Get ASCII code")
	fmt.Println("  ord(\"A\")          → 65")
	fmt.Println("  ord(\"a\")          → 97")
	fmt.Println("")
	fmt.Println("chr(code)           Get character from code")
	fmt.Println("  chr(65)           → \"A\"")
	fmt.Println("  chr(97)           → \"a\"")
	fmt.Println("")
}

func showCollectionFunctions() {
	fmt.Println("")
	fmt.Println("COLLECTION FUNCTIONS")
	fmt.Println("═══════════════════════")
	fmt.Println("")
	fmt.Println("enumerate(array)    Get index-value pairs")
	fmt.Println("  for i, val in enumerate([\"a\",\"b\"]):")
	fmt.Println("      print(i, val)  # 0 a, 1 b")
	fmt.Println("")
	fmt.Println("pairs(hash, filter) Get key-value pairs")
	fmt.Println("  for k, v in pairs({\"name\":\"Alice\"}):")
	fmt.Println("      print(k, v)    # name Alice")
	fmt.Println("")
	fmt.Println("is_sametype(a, b)   Check if same type")
	fmt.Println("  is_sametype(42, 17)     → True")
	fmt.Println("  is_sametype(42, \"42\")   → False")
	fmt.Println("")
}

func showSystemFunctions() {
	fmt.Println("")
	fmt.Println("SYSTEM FUNCTIONS")
	fmt.Println("══════════════════")
	fmt.Println("")
	fmt.Println("help()              Show basic help information")
	fmt.Println("version()           Show version information")
	fmt.Println("modules()           List standard library modules")
	fmt.Println("")
	fmt.Println("open(path, mode)    Open file for reading/writing")
	fmt.Println("  open(\"data.txt\", \"r\")  # Read mode")
	fmt.Println("  open(\"out.txt\", \"w\")   # Write mode")
	fmt.Println("  open(\"log.txt\", \"a\")   # Append mode")
	fmt.Println("")
	fmt.Println("parseHash(json_str) Parse JSON string to hash")
	fmt.Println("  parseHash('{\"name\": \"Alice\"}')  # → {\"name\": \"Alice\"}")
	fmt.Println("")
}

func showAllBuiltinFunctions() {
	showTypeConversionFunctions()
	showUtilityFunctions()
	showMathFunctions()
	showCollectionFunctions()
	showSystemFunctions()
}

// Standard library module displays
func showArrayModule() {
	fmt.Println("")
	fmt.Println("ARRAY MODULE")
	fmt.Println("═══════════════")
	fmt.Println("")
	fmt.Println("Constructor:")
	fmt.Println("  arr = Array([1,2,3,4,5])")
	fmt.Println("")
	fmt.Println("Core Methods:")
	fmt.Println("  .length()         → 5")
	fmt.Println("  .append(6)        Add element to end")
	fmt.Println("  .get(0)           → 1 (supports negative indexing)")
	fmt.Println("  .set(0, 10)       Set element at index")
	fmt.Println("  .contains(3)      → True")
	fmt.Println("  .is_empty()       → False")
	fmt.Println("  .clear()          Remove all elements")
	fmt.Println("")
	fmt.Println("Search & Access:")
	fmt.Println("  .index_of(3)      → 2 (first occurrence)")
	fmt.Println("  .remove(3)        Remove first occurrence")
	fmt.Println("  .first()          Get first element")
	fmt.Println("  .last()           Get last element")
	fmt.Println("")
	fmt.Println("Advanced Operations:")
	fmt.Println("  .slice(1, 3)      Create new array from range")
	fmt.Println("  .reverse()        Create reversed copy")
	fmt.Println("  .sort()           Create sorted copy")
	fmt.Println("  .to_string()      String representation")
	fmt.Println("")
}

func showStringModule() {
	fmt.Println("")
	fmt.Println("STRING MODULE")
	fmt.Println("════════════════")
	fmt.Println("")
	fmt.Println("Constructor:")
	fmt.Println("  s = String(\"Hello World\")")
	fmt.Println("")
	fmt.Println("Basic Properties:")
	fmt.Println("  .length()         → 11")
	fmt.Println("  .to_string()      → \"Hello World\"")
	fmt.Println("")
	fmt.Println("Case Conversion:")
	fmt.Println("  .upper()          → \"HELLO WORLD\"")
	fmt.Println("  .lower()          → \"hello world\"")
	fmt.Println("")
	fmt.Println("Search & Access:")
	fmt.Println("  .find(\"World\")    → 6 (index of substring)")
	fmt.Println("  .contains(\"Hello\") → True")
	fmt.Println("  .char_at(0)       → \"H\" (supports negative)")
	fmt.Println("  .char_at(-1)      → \"d\"")
	fmt.Println("")
	fmt.Println("Transformation:")
	fmt.Println("  .reverse()        → \"dlroW olleH\"")
	fmt.Println("")
	fmt.Println("Text Processing:")
	fmt.Println("  .split(\",\")       Split into array by separator")
	fmt.Println("  .join([\"a\",\"b\"])  Join array with this as separator")
	fmt.Println("  .strip(\" \")       Remove characters from both ends")
	fmt.Println("")
	fmt.Println("Type Conversion:")
	fmt.Println("  .to_int()         Convert to integer")
	fmt.Println("  .to_float()       Convert to float")
	fmt.Println("")
}

func showIntegerModule() {
	fmt.Println("")
	fmt.Println("INTEGER MODULE")
	fmt.Println("═════════════════")
	fmt.Println("")
	fmt.Println("Constructor:")
	fmt.Println("  i = Integer(42)")
	fmt.Println("")
	fmt.Println("Number Base Conversions:")
	fmt.Println("  .to_bin()         → \"0b101010\"")
	fmt.Println("  .to_oct()         → \"0o52\"")
	fmt.Println("  .to_hex()         → \"0x2a\"")
	fmt.Println("")
	fmt.Println("Mathematical Operations:")
	fmt.Println("  .abs()            → 42 (absolute value)")
	fmt.Println("  .pow(2)           → 1764 (42²)")
	fmt.Println("  .gcd(18)          → 6 (greatest common divisor)")
	fmt.Println("  .lcm(18)          → 126 (least common multiple)")
	fmt.Println("")
	fmt.Println("Utility Methods:")
	fmt.Println("  .is_even()        → True")
	fmt.Println("  .is_odd()         → False")
	fmt.Println("  .is_prime()       → False")
	fmt.Println("  .to_string()      → \"42\"")
	fmt.Println("  .to_float()       → 42.0")
	fmt.Println("")
	fmt.Println("Auto-wrapping: 42.to_bin() works directly!")
	fmt.Println("")
}

func showFloatModule() {
	fmt.Println("")
	fmt.Println("FLOAT MODULE")
	fmt.Println("═══════════════")
	fmt.Println("")
	fmt.Println("Constructor:")
	fmt.Println("  f = Float(3.14159)")
	fmt.Println("")
	fmt.Println("Rounding & Precision:")
	fmt.Println("  .round(2)         → 3.14")
	fmt.Println("  .floor()          → 3")
	fmt.Println("  .ceil()           → 4")
	fmt.Println("")
	fmt.Println("Mathematical Operations:")
	fmt.Println("  .abs()            Absolute value")
	fmt.Println("  .sqrt()           Square root (Newton's method)")
	fmt.Println("  .pow(2)           Raise to power")
	fmt.Println("  .sin()            Sine (Taylor series)")
	fmt.Println("  .cos()            Cosine (Taylor series)")
	fmt.Println("")
	fmt.Println("Type Checking:")
	fmt.Println("  .is_integer()     → False")
	fmt.Println("  .is_positive()    → True")
	fmt.Println("  .is_negative()    → False")
	fmt.Println("  .is_zero()        → False")
	fmt.Println("")
	fmt.Println("Conversions:")
	fmt.Println("  .to_int()         → 3")
	fmt.Println("  .to_string()      → \"3.14159\"")
	fmt.Println("")
}

func showBooleanModule() {
	fmt.Println("")
	fmt.Println("BOOLEAN MODULE")
	fmt.Println("═══════════════")
	fmt.Println("")
	fmt.Println("Constructor:")
	fmt.Println("  b = Boolean()             → False (default)")
	fmt.Println("  b = Boolean(True)         → True")
	fmt.Println("  b = Boolean(\"True\")       Auto-conversion from string")
	fmt.Println("  b = Boolean(42)           Auto-conversion from number")
	fmt.Println("")
	fmt.Println("Type Conversion:")
	fmt.Println("  .to_int()                 → 1 (True) or 0 (False)")
	fmt.Println("  .to_string()              → \"True\" or \"False\"")
	fmt.Println("")
	fmt.Println("Logical Operations:")
	fmt.Println("  .negate()                 Logical NOT")
	fmt.Println("  .and_with(other)          Logical AND")
	fmt.Println("  .or_with(other)           Logical OR")
	fmt.Println("  .xor_with(other)          Logical XOR")
	fmt.Println("  .implies(other)           Logical implication")
	fmt.Println("")
	fmt.Println("Truth Testing:")
	fmt.Println("  .is_true()                Check if explicitly True")
	fmt.Println("  .is_false()               Check if explicitly False")
	fmt.Println("")
}

func showFileModule() {
	fmt.Println("")
	fmt.Println("FILE MODULE")
	fmt.Println("══════════════")
	fmt.Println("")
	fmt.Println("Constructor:")
	fmt.Println("  f = File()                 Empty file object")
	fmt.Println("  f = File(\"path.txt\", \"r\")  Open file directly")
	fmt.Println("")
	fmt.Println("Instance Methods:")
	fmt.Println("  .file_open(\"data.txt\", \"r\") Open file with mode")
	fmt.Println("  .file_read()              Read content from handle")
	fmt.Println("  .file_write(content)      Write to opened file")
	fmt.Println("  .seek(offset, whence)     Set file position")
	fmt.Println("  .tell()                   Get file position")
	fmt.Println("  .flush()                  Flush write buffer")
	fmt.Println("  .close()                  Close file handle")
	fmt.Println("")
	fmt.Println("Static Methods:")
	fmt.Println("  File.read(\"data.txt\")     Read entire file as string")
	fmt.Println("  File.write(\"out.txt\", data) Write content (overwrites)")
	fmt.Println("  File.append(\"log.txt\", msg) Append content to file")
	fmt.Println("  File.exists(\"file.txt\")  Check if file exists")
	fmt.Println("  File.open(\"path\", \"mode\") Create and open File instance")
	fmt.Println("")
	fmt.Println("Example Usage:")
	fmt.Println("  file = File(\"config.txt\", \"r\")")
	fmt.Println("  content = file.file_read()")
	fmt.Println("  file.close()")
	fmt.Println("")
}

func showOSModule() {
	fmt.Println("")
	fmt.Println("OS MODULE")
	fmt.Println("════════════")
	fmt.Println("")
	fmt.Println("Constructor:")
	fmt.Println("  os = os()")
	fmt.Println("")
	fmt.Println("Directory Operations:")
	fmt.Println("  .cwd()                    Get current directory")
	fmt.Println("  .chdir(\"/path/to/dir\")    Change directory")
	fmt.Println("  .list_dir(\".\")           List directory contents")
	fmt.Println("  .mkdir(\"folder\", 0755)    Create directory")
	fmt.Println("  .remove(\"file_or_dir\")    Remove file/directory")
	fmt.Println("")
	fmt.Println("Environment Variables:")
	fmt.Println("  .getenv(\"HOME\")           Get environment variable")
	fmt.Println("  .setenv(\"VAR\", \"value\")   Set environment variable")
	fmt.Println("  .expandEnv(\"$HOME/docs\")  Expand variables in string")
	fmt.Println("")
	fmt.Println("Process Management:")
	fmt.Println("  .run(\"ls\", [\"-la\"], False) Execute system command")
	fmt.Println("  .sleep(2)                 Sleep for seconds")
	fmt.Println("")
}

func showMathModule() {
	fmt.Println("")
	fmt.Println("MATH MODULE")
	fmt.Println("══════════════")
	fmt.Println("")
	fmt.Println("Constructor:")
	fmt.Println("  math = Math()")
	fmt.Println("")
	fmt.Println("Available Methods:")
	fmt.Println("  .info()           Returns module information")
	fmt.Println("")
	fmt.Println("Note: Mathematical functions are available through:")
	fmt.Println("  • Float module: .sqrt(), .sin(), .cos(), .pow(), .abs()")
	fmt.Println("  • Integer module: .gcd(), .lcm(), .pow(), .abs(), .is_prime()")
	fmt.Println("  • Built-ins: max(), abs(), ord(), chr()")
	fmt.Println("")
	fmt.Println("The Math module serves as a placeholder for future")
	fmt.Println("mathematical function consolidation.")
	fmt.Println("")
}

func showTimeModule() {
	fmt.Println("")
	fmt.Println("TIME MODULE")
	fmt.Println("════════════")
	fmt.Println("")
	fmt.Println("Constructor:")
	fmt.Println("  t = Time()")
	fmt.Println("")
	fmt.Println("Current Time:")
	fmt.Println("  .now()                    Get current time object")
	fmt.Println("  .now_timestamp()          Get Unix timestamp (seconds)")
	fmt.Println("  .now_nano()               Get Unix timestamp (nanoseconds)")
	fmt.Println("")
	fmt.Println("Time Operations:")
	fmt.Println("  .sleep(seconds)           Sleep for specified duration")
	fmt.Println("  .format(time, layout)     Format time with layout string")
	fmt.Println("  .parse(layout, value)     Parse time from string")
	fmt.Println("")
	fmt.Println("Example Usage:")
	fmt.Println("  t = Time()")
	fmt.Println("  timestamp = t.now_timestamp()")
	fmt.Println("  t.sleep(2.5)              # Sleep for 2.5 seconds")
	fmt.Println("")
}

func showHTTPModule() {
	fmt.Println("")
	fmt.Println("HTTP MODULE (ApiRequest)")
	fmt.Println("════════════════════════")
	fmt.Println("")
	fmt.Println("Constructor:")
	fmt.Println("  api = ApiRequest()")
	fmt.Println("")
	fmt.Println("HTTP Methods:")
	fmt.Println("  .get(url, headers)        HTTP GET request")
	fmt.Println("  .post(url, body, headers) HTTP POST request")
	fmt.Println("  .put(url, body, headers)  HTTP PUT request")
	fmt.Println("  .delete(url, headers)     HTTP DELETE request")
	fmt.Println("")
	fmt.Println("JSON Methods:")
	fmt.Println("  .get_json(url, headers)   GET with JSON response")
	fmt.Println("  .post_json(url, data, headers) POST with JSON data")
	fmt.Println("")
	fmt.Println("Utility Methods:")
	fmt.Println("  .with_auth(headers, token) Add Bearer auth to headers")
	fmt.Println("  .build_url(base, params)  Build URL with query params")
	fmt.Println("")
	fmt.Println("Example Usage:")
	fmt.Println("  api = ApiRequest()")
	fmt.Println("  response = api.get_json(\"https://api.example.com/data\")")
	fmt.Println("  if response[\"success\"]:\n      data = response[\"data\"]")
	fmt.Println("")
}

func showAllStandardLibrary() {
	showArrayModule()
	showStringModule()
	showIntegerModule()
	showFloatModule()
	showBooleanModule()
	showFileModule()
	showOSModule()
	showMathModule()
	showTimeModule()
	showHTTPModule()
}

