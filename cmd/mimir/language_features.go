package main

import "fmt"

// Language feature displays
func showVariablesAndAssignment() {
	fmt.Println("")
	fmt.Println("VARIABLES & ASSIGNMENT")
	fmt.Println("═════════════════════════")
	fmt.Println("")
	fmt.Println("Basic Assignment:")
	fmt.Println("  x = 42")
	fmt.Println("  name = \"Alice\"")
	fmt.Println("  is_active = True")
	fmt.Println("")
	fmt.Println("Tuple Unpacking:")
	fmt.Println("  x, y = (10, 20)")
	fmt.Println("  a, b, c = [1, 2, 3]")
	fmt.Println("  first, *rest = [1, 2, 3, 4, 5]")
	fmt.Println("")
	fmt.Println("Compound Assignment:")
	fmt.Println("  x += 5    # x = x + 5")
	fmt.Println("  y -= 3    # y = y - 3")
	fmt.Println("  z *= 2    # z = z * 2")
	fmt.Println("  w /= 4    # w = w / 4")
	fmt.Println("")
	fmt.Println("Increment/Decrement:")
	fmt.Println("  x++       # Post-increment (returns old value)")
	fmt.Println("  ++x       # Pre-increment (returns new value)")
	fmt.Println("  y--       # Post-decrement")
	fmt.Println("  --y       # Pre-decrement")
	fmt.Println("")
}

func showControlFlow() {
	fmt.Println("")
	fmt.Println("CONTROL FLOW")
	fmt.Println("═══════════════")
	fmt.Println("")
	fmt.Println("If Statements:")
	fmt.Println("  if condition:")
	fmt.Println("      # code")
	fmt.Println("  otherwise another_condition:")
	fmt.Println("      # code")
	fmt.Println("  else:")
	fmt.Println("      # code")
	fmt.Println("")
	fmt.Println("For Loops:")
	fmt.Println("  for item in array:")
	fmt.Println("      print(item)")
	fmt.Println("  ")
	fmt.Println("  for i in range(5):")
	fmt.Println("      print(i)")
	fmt.Println("")
	fmt.Println("While Loops:")
	fmt.Println("  while condition:")
	fmt.Println("      # code")
	fmt.Println("")
	fmt.Println("Match Statements:")
	fmt.Println("  match value:")
	fmt.Println("      case \"option1\":")
	fmt.Println("          # code")
	fmt.Println("      case \"option2\":")
	fmt.Println("          # code")
	fmt.Println("      _:")
	fmt.Println("          # default")
	fmt.Println("")
	fmt.Println("Loop Control:")
	fmt.Println("  skip      # Continue to next iteration")
	fmt.Println("  stop      # Break from loop")
	fmt.Println("")
}

func showFunctions() {
	fmt.Println("")
	fmt.Println("FUNCTIONS (SPELLS)")
	fmt.Println("═══════════════════")
	fmt.Println("")
	fmt.Println("Basic Function:")
	fmt.Println("  spell greet(name):")
	fmt.Println("      return f\"Hello, {name}!\"")
	fmt.Println("")
	fmt.Println("With Default Parameters:")
	fmt.Println("  spell power(base, exponent = 2):")
	fmt.Println("      return base ** exponent")
	fmt.Println("")
	fmt.Println("Multiple Parameters:")
	fmt.Println("  spell calculate(operation, a, b):")
	fmt.Println("      match operation:")
	fmt.Println("          case \"add\":")
	fmt.Println("              return a + b")
	fmt.Println("          case \"multiply\":")
	fmt.Println("              return a * b")
	fmt.Println("          _:")
	fmt.Println("              return \"Unknown operation\"")
	fmt.Println("")
	fmt.Println("Calling Functions:")
	fmt.Println("  message = greet(\"World\")")
	fmt.Println("  square = power(5)")
	fmt.Println("  cube = power(5, 3)")
	fmt.Println("")
}

func showClasses() {
	fmt.Println("")
	fmt.Println("CLASSES (GRIMOIRES)")
	fmt.Println("════════════════════════")
	fmt.Println("")
	fmt.Println("Basic Class:")
	fmt.Println("  grim Person:")
	fmt.Println("      init(name, age):")
	fmt.Println("          self.name = name")
	fmt.Println("          self.age = age")
	fmt.Println("      ")
	fmt.Println("      spell greet():")
	fmt.Println("          return f\"Hi, I'm {self.name}\"")
	fmt.Println("")
	fmt.Println("Inheritance:")
	fmt.Println("  grim Student(Person):")
	fmt.Println("      init(name, age, school):")
	fmt.Println("          super.init(name, age)")
	fmt.Println("          self.school = school")
	fmt.Println("      ")
	fmt.Println("      spell study():")
	fmt.Println("          return f\"{self.name} is studying\"")
	fmt.Println("")
	fmt.Println("Abstract Classes:")
	fmt.Println("  arcane grim Shape:")
	fmt.Println("      @arcanespell")
	fmt.Println("      spell area():")
	fmt.Println("          ignore  # Abstract method")
	fmt.Println("")
	fmt.Println("Usage:")
	fmt.Println("  person = Person(\"Alice\", 30)")
	fmt.Println("  print(person.greet())")
	fmt.Println("")
}

func showErrorHandling() {
	fmt.Println("")
	fmt.Println("ERROR HANDLING")
	fmt.Println("═════════════════")
	fmt.Println("")
	fmt.Println("Basic Error Handling:")
	fmt.Println("  attempt:")
	fmt.Println("      result = risky_operation()")
	fmt.Println("  ensnare:")
	fmt.Println("      print(\"Something went wrong\")")
	fmt.Println("")
	fmt.Println("Specific Error Types:")
	fmt.Println("  attempt:")
	fmt.Println("      number = int(user_input)")
	fmt.Println("  ensnare (ValueError):")
	fmt.Println("      print(\"Invalid number format\")")
	fmt.Println("  ensnare:")
	fmt.Println("      print(\"Other error occurred\")")
	fmt.Println("")
	fmt.Println("With Finally Block:")
	fmt.Println("  attempt:")
	fmt.Println("      file = open(\"data.txt\")")
	fmt.Println("      process_file(file)")
	fmt.Println("  ensnare:")
	fmt.Println("      print(\"File processing failed\")")
	fmt.Println("  resolve:")
	fmt.Println("      print(\"Cleanup completed\")")
	fmt.Println("")
	fmt.Println("Raising Errors:")
	fmt.Println("  if age < 0:")
	fmt.Println("      raise Error(\"ValueError\", \"Age cannot be negative\")")
	fmt.Println("")
	fmt.Println("Assertions:")
	fmt.Println("  check(age >= 0, \"Age must be non-negative\")")
	fmt.Println("")
}

func showModules() {
	fmt.Println("")
	fmt.Println("MODULES & IMPORTS")
	fmt.Println("═══════════════════")
	fmt.Println("")
	fmt.Println("Basic Import:")
	fmt.Println("  import \"math_utils\"")
	fmt.Println("  import \"utils/helpers\"")
	fmt.Println("")
	fmt.Println("Specific Imports:")
	fmt.Println("  import \"data_structures.Stack\"")
	fmt.Println("  import \"utilities.FileHelper\"")
	fmt.Println("")
	fmt.Println("Import with Alias:")
	fmt.Println("  import \"very_long_module_name\" as short")
	fmt.Println("  import \"math_operations\" as math_ops")
	fmt.Println("")
	fmt.Println("File Organization:")
	fmt.Println("  main.crl           # Main application")
	fmt.Println("  utils/")
	fmt.Println("    string_utils.crl # String utilities")
	fmt.Println("    math_utils.crl   # Math functions")
	fmt.Println("  models/")
	fmt.Println("    user.crl         # User model")
	fmt.Println("    product.crl      # Product model")
	fmt.Println("")
}

func showDataTypes() {
	fmt.Println("")
	fmt.Println("DATA TYPES")
	fmt.Println("═════════════")
	fmt.Println("")
	fmt.Println("Primitive Types:")
	fmt.Println("  Integer    42, -17, 0")
	fmt.Println("  Float      3.14, -2.5, 0.0")
	fmt.Println("  String     \"hello\", 'world', \"\"")
	fmt.Println("  Boolean    True, False")
	fmt.Println("  None       None")
	fmt.Println("")
	fmt.Println("Collection Types:")
	fmt.Println("  Array      [1, 2, 3, 4]")
	fmt.Println("  Hash       {\"name\": \"Alice\", \"age\": 30}")
	fmt.Println("  Tuple      (1, 2, 3)")
	fmt.Println("")
	fmt.Println("Type Checking:")
	fmt.Println("  type(42)           → \"INTEGER\"")
	fmt.Println("  type(3.14)         → \"FLOAT\"")
	fmt.Println("  type(\"hello\")      → \"STRING\"")
	fmt.Println("  type([1,2,3])      → \"ARRAY\"")
	fmt.Println("")
	fmt.Println("Auto-wrapping:")
	fmt.Println("  42.to_bin()        # Integer methods work directly")
	fmt.Println("  \"hello\".upper()    # String methods work directly")
	fmt.Println("  3.14.round(1)      # Float methods work directly")
	fmt.Println("")
}

func showOperators() {
	fmt.Println("")
	fmt.Println("OPERATORS")
	fmt.Println("═══════════")
	fmt.Println("")
	fmt.Println("Arithmetic:")
	fmt.Println("  +, -, *, /         Basic math")
	fmt.Println("  //, %              Integer division, modulo")
	fmt.Println("  **                 Exponentiation")
	fmt.Println("")
	fmt.Println("Comparison:")
	fmt.Println("  ==, !=             Equal, not equal")
	fmt.Println("  <, >, <=, >=       Less/greater than")
	fmt.Println("  in, not in         Membership test")
	fmt.Println("")
	fmt.Println("Logical:")
	fmt.Println("  and, or, not       Boolean logic")
	fmt.Println("")
	fmt.Println("Assignment:")
	fmt.Println("  =                  Basic assignment")
	fmt.Println("  +=, -=, *=, /=     Compound assignment")
	fmt.Println("  ++, --             Increment/decrement")
	fmt.Println("")
	fmt.Println("Bitwise:")
	fmt.Println("  &, |, ^            AND, OR, XOR")
	fmt.Println("  ~                  NOT")
	fmt.Println("  <<, >>             Left/right shift")
	fmt.Println("")
}

func showAllLanguageFeatures() {
	showVariablesAndAssignment()
	showControlFlow()
	showFunctions()
	showClasses()
	showErrorHandling()
	showModules()
	showDataTypes()
	showOperators()
}